type Course {
  id: Int!
  title: String!
  url: String
  shortDescription: String
  content: String
  videoEmbed: String
  imageUrl: String
  available: Boolean
  lessons: [Lesson]
}

type GenericResponse {
  success: Boolean
}

type Lesson {
  id: Int!
  title: String!
  url: String
  shortDescription: String
  content: String
  videoEmbed: String
  imageUrl: String
  available: Boolean
  courses: [Course]
}

type Mutation {
  createCourse(title: String!, url: String, shortDescription: String, content: String, videoEmbed: String, imageUrl: String, available: Boolean): Course
  updateCourse(id: Int, title: String, url: String, shortDescription: String, content: String, videoEmbed: String, imageUrl: String, available: Boolean): Course
  deleteCourse(id: Int!): GenericResponse
  addCourseToLesson(id: Int!, lessonId: Int!): GenericResponse
  removeCourseFromLesson(id: Int!, lessonId: Int!): GenericResponse
  createLesson(title: String!, url: String, shortDescription: String, content: String, videoEmbed: String, imageUrl: String, available: Boolean): Lesson
  updateLesson(id: Int, title: String, url: String, shortDescription: String, content: String, videoEmbed: String, imageUrl: String, available: Boolean): Lesson
  deleteLesson(id: Int!): GenericResponse
  addLessonToCourse(id: Int!, courseId: Int!): GenericResponse
  removeLessonFromCourse(id: Int!, courseId: Int!): GenericResponse
}

type Query {
  courses: [Course]
  course(
    id: Int
  ): Course
  lessons: [Lesson]
  lesson(
    id: Int
  ): Lesson
}
